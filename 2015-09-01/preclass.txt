## Reading questions

The first two questions are questions from last time, but worth
revisiting.  These are up rather late, but do what you can, and come
with questions for class!

1.  The class cluster consists of eight nodes and fifteen Xeon Phi
    accelerator boards.  Based on an online search for information on
    these systems, what do you think is the theoretical peak flop rate
    (double-precision floating point operations per second)?  Show how
    you computed this, and give URLs for where you got the parameters
    in your calculation.  (We will return to this question again after
    we cover some computer architecture.)
	
	According to the Intel website, the theoretical peak flop rate
    (double-precision) for a single Xeon Phi 5110P board is 1,011 
    gigaflops/second. With 15 such boards, their combined flop rate is
    15,165 gigaflops/second. (This is a correction from my answer last time)

    For the Xeon E5-2620 processors, the Intel specs sheet gives a gigaflop
    rate of 120 gigaflops/second for a single core (with Max Turbo). With
    8 12-core nodes, this gives 96 x 120 = 11,520 gigaflops/second.

    In total, our cluster has a theoretical peak of 15,165 + 11,520 =
    26,685 gigaflops/second.

    References:
    http://www.intel.com/content/www/us/en/benchmarks/server/xeon-phi/xeon-phi-theoretical-maximums.html
    http://download.intel.com/support/processors/xeon/sb/xeon_E5-2600.pdf
    
2.  What is the approximate theoretical peak flop rate for your own machine?

	My workstation machine is a Dell OptiPlex 7020 with an Intel i7-4790 CPU.
    It runs at 3.60 GHz (4 GHz on Max Turbo) on 4 cores. From what I found online,
    its peak flop rate is ~34 gigaflops/second.

    References:
    http://ark.intel.com/products/80806/Intel-Core-i7-4790-Processor-8M-Cache-up-to-4_00-GHz
    https://setiathome.berkeley.edu/cpu_list.php

3.  Suppose there are t tasks that can be executed in a pipeline
    with p stages.  What is the speedup over serial execution of the
    same tasks?
	
	Assuming a unit time for each stage:
	T_serial = t*p
	T_pipeline = p+t-1
	Speedup = S(p) = (t*p)/(p+t-1)

4.  Consider the following list of tasks (assume they can't be pipelined):

      compile GCC (1 hr)
      compile OpenMPI (0.5 hr) - depends on GCC
      compile OpenBLAS (0.25 hr) - depends on GCC
      compile LAPACK (0.5 hr) - depends on GCC and OpenBLAS
      compile application (0.5 hr) - depends on GCC, OpenMPI,
        OpenBLAS, LAPACK

    What is the minimum serial time between starting to compile and having
    a compiled application?  What is the minimum parallel time given
    an arbitrary number of processors?

	Minimum serial time = 1 + 0.5 + 0.25 + 0.5 + 0.5 = 2.75 hr
	Minimum parallel time = 1 + 0.25 + 0.5 + 0.5 = 2.25 hr
	
	In the parallel process, we compile GCC, then compile OpenMPI and 
	OpenBLAS at the same time. Once OpenBLAS finishes, we compile LAPACK.
	One LAPACK finishes, we compile the application. Because of the
	dependency of the tasks, we cannot fully parallelize the operation.	
	
5.  Clone the membench repository from GitHub:

       git clone git@github.com:cornell-cs5220-f15/membench.git

    On your own machine, build `membench` and generate the associated
    plots; for many of you, this should be as simple as typing `make`
    at the terminal (though I assume you have Python with pandas and
    Matplotlib installed; see also the note about Clang and OpenMP
    in the leading comments of the Makefile).  Look at the output file
    timings-heat.pdf; what can you tell about the cache architecture
    on your machine from the plot?

    My plot timings-heat.pdf looks similar to the one shown in class.
    The dark blue diagonal on the right-hand side suggests 8-way associativity
    since it is three blocks wide. The worst timing is when the stride is 2^14
    and the size of the array is 2^26.

6.  From the cloned repository, check out the totient branch:

       git checkout totient

    You may need to move generated files out of the way to do this.
    If you prefer, you can also look at the files on GitHub.  Either
    way, repeat the exercise of problem 5.  What can you tell about
    the cache architecture of the totient nodes?

    The plot timings-heat.pdf found in the totient branch also shows 8-way
    associativity from the three block wide diagonal on the right. However in
    this case, the worst timing comes on arrays of size 2^25 or 2^26 when
    the stride is between 2^6 and 2^22. This may suggest that the L2 cache
    is limited to holding 2^24 floating points numbers.

7.  Implement the following three methods of computing the centroid
    of a million two-dimensional coordinates (double precision).
    Time and determine which is faster:

    a.  Store an array of (x,y) coordinates; loop i and simultaneously
        sum the xi and yi

    b.  Store an array of (x,y) coordinates; loop i and sum the xi,
        then sum the yi in a separate loop

    c.  Store the xi in one array, the yi in a second array.
        Sum the xi, then sum the yi.

    I recommend doing this on the class cluster using the Intel
    compiler.  To do this, run "module load cs5220" and run (e.g.)

        icc -o centroid centroid.c

    When I used the intel compiler, all of the times were zero. However when I
    used the GCC compiler, I got the following times:
        Version 1: 8.800000e-03
        Version 2: 1.040000e-02
        Version 3: 7.000000e-03

    Note surprisingly, Version 3 is the fastest because all of the data
    that is read in is located in contiguous memory. Version 2 is the slowest
    because it passes through the data twice with a stride of 2.

