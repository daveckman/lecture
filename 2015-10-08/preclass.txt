0.  How much time did you spend on this pre-class exercise, and when?
    1 hour.

1.  What are one or two points that you found least clear in the
    10/08 slide decks (including the narration)?

    At first I thought LogP meant there was a logarithm term, but then
    I realized that it was just the four parameters, L, o, g, and P.

2.  Now that we are now basically a third of the way into the
    semester, and are (mostly) settled into the steady pace of things,
    I would appreciate your feedback on what is working well or poorly
    about the class.  Comments on things I can reasonably change are
    particularly useful -- venting about the cluster, for example, is
    understandable but doesn't help me that much in adjusting!

    I filled out the class survey on CMS. One of my main issues has
    been figuring out how to get the code for the pre-class questions
    to run on my machine or on the totient cluster.

3.  The ring demo implements the protocol described in the particle
    systems slide deck from 9/15:

    http://cornell-cs5220-f15.github.io/slides/2015-09-15-particle.html#/11

    a) In your own words, describe what ring.c is doing.

    From what I can tell, ring.c splits a domain accross p processors.
    Each processors performs local updates based on its particles and its buffer.
    These local updates reflect the effects between particles across the domain.
    Each processor then passes that buffer information onto the next processor
    and receives new buffer information from the previous processor. The
    new buffer information is then copied into local memory and then used to
    again perform updates. This process is repeated until all processors have
    seen all of the buffer data.

    b) How might you modify the code to have the same computational
       pattern, but using non-blocking communication rather than
       MPI_Sendrecv?  Note that according to the MPI standard,
       one isn't supposed to read from a buffer that is being
       handled by a non-blocking send, so it is probably necessary
       to use three temporary buffers rather than the current two.

       To implement non-blocking communication, we should first use

       MPI_Request reqs[2] 

       to get two request numbers to later use as handles.
       We should then be able to use

       MPI_Irecv(recv_buf, nper, MPI_DOUBLE, prev, phase, MPI_COMM_WORLD, &reqs[0])
       MPI_Isend(curr_buf, nper, MPI_DOUBLE, next, phase, MPI_COMM_WORLD, &reqs[1])

       We might also consider using MPI_Wait or MPI_Test commands.